{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","pools","fetchData","bind","this","fetch","then","response","json","setState","Container","Object","keys","filter","x","sort","map","project","Card","key","Header","className","length","count","instance","task","ListGroup","domain","ListGroupItem","pool","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88d008c2.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pools: {}\n    };\n    this.fetchData = this.fetchData.bind(this);\n  }\n  \n  componentDidMount() {\n    this.fetchData();\n  }\n  \n  fetchData() {\n    fetch('https://raw.githubusercontent.com/minionsmanaged/observations/master/pools.json')\n      .then(response => response.json())\n      .then(pools => {\n        this.setState(state => {\n          state.pools = pools;\n          return state;\n        });\n      });\n  }\n\n  render() {\n    return (\n      <Container>\n          {\n            Object.keys(this.state.pools).filter(x => x !== 'count').sort().map(project => (\n              <Card key={project}>\n                <Card.Header>\n                    <strong>\n                      {project}\n                    </strong>\n                    <small className=\"text-muted font-weight-light float-right\">\n                      {(Object.keys(this.state.pools[project]).length - 1)} active domain{((Object.keys(this.state.pools[project]).length - 1) === 1) ? '' : 's'},\n                      &nbsp;{this.state.pools[project].count.instance} running instance{(this.state.pools[project].count.instance === 1) ? '' : 's'},\n                      &nbsp;{this.state.pools[project].count.task}  recent task{(this.state.pools[project].count.task === 1) ? '' : 's'}\n                    </small>\n                </Card.Header>\n                <ListGroup className=\"list-group-flush\">\n                  {\n                    Object.keys(this.state.pools[project]).filter(x => x !== 'count').sort().map(domain => (\n                      <ListGroupItem key={domain}>\n                        <strong>\n                          {domain}\n                        </strong>\n                        <small className=\"text-muted font-weight-light float-right\">\n                          {(Object.keys(this.state.pools[project][domain]).length - 1)} pool{((Object.keys(this.state.pools[project][domain]).length - 1) === 1) ? '' : 's'},\n                          &nbsp;{this.state.pools[project][domain].count.instance} running instance{(this.state.pools[project][domain].count.instance === 1) ? '' : 's'},\n                          &nbsp;{this.state.pools[project][domain].count.task}  recent task{(this.state.pools[project][domain].count.task === 1) ? '' : 's'}\n                        </small>\n                        <ul>\n                          {\n                            Object.keys(this.state.pools[project][domain]).filter(x => x !== 'count').sort().map(pool => (\n                              <li key={pool}>\n                                {pool}\n                                <small className=\"text-muted font-weight-light float-right\">\n                                  {this.state.pools[project][domain][pool].count.instance} running instance{(this.state.pools[project][domain][pool].count.instance === 1) ? '' : 's'},\n                                  &nbsp;{this.state.pools[project][domain][pool].count.task}  recent task{(this.state.pools[project][domain][pool].count.task === 1) ? '' : 's'}\n                                </small>\n                              </li>\n                            ))\n                          }\n                        </ul>\n                      </ListGroupItem>\n                    ))\n                  }\n                </ListGroup>\n              </Card>\n            ))\n          }\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}