{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","filter","option","projects","domains","workers","selection","columns","fluid","pools","fetchData","bind","this","setColumns","window","addEventListener","removeEventListener","Object","keys","length","innerWidth","setState","fetch","then","response","json","undefined","reduce","o","k","x","sort","forEach","project","Set","domain","Container","Row","Col","map","property","Form","Check","type","onChange","checked","includes","label","id","key","Array","column","xs","pA","pB","i","Card","Header","className","count","instance","task","ListGroup","ListGroupItem","pool","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23e71d1e.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\nimport Form from 'react-bootstrap/Form';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: {\n        option: {\n          projects: [],\n          domains: [],\n          workers: []\n        },\n        selection: {\n          projects: [\n            'gecko'\n          ],\n          domains: [\n            'gecko-1',\n            'gecko-3',\n            'gecko-t'\n          ],\n          workers: [\n            'b-linux',\n            'b-linux-aws',\n            'b-linux-xlarge',\n            'b-win2012',\n            't-win10-64',\n            't-win10-64-gpu-s',\n            't-win7-32',\n            't-win7-32-gpu',\n            't-linux-large',\n            't-linux-xlarge'\n          ]\n        }\n      },\n      columns: 4,\n      fluid: false,\n      pools: {}\n    };\n    this.fetchData = this.fetchData.bind(this);\n    //this.handleFilterChange = this.handleFilterChange.bind(this);\n  }\n  \n  componentDidMount() {\n    this.fetchData();\n    this.setColumns();\n    window.addEventListener('resize', this.setColumns.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setColumns.bind(this));\n  }\n\n  setColumns() {\n    if ((Object.keys(this.state.pools).length < 3) || (window.innerWidth < 600)) {\n      this.setState({ columns: 1, fluid: false });\n    } else if (window.innerWidth < 900) {\n      this.setState({ columns: 2, fluid: false });\n    } else if (window.innerWidth < 1200) {\n      this.setState({ columns: 3, fluid: true });\n    } else {\n      this.setState({ columns: 4, fluid: true });\n    }\n  }\n  \n  fetchData() {\n    fetch('https://raw.githubusercontent.com/minionsmanaged/observations/master/pools.json')\n      .then(response => response.json())\n      .then(pools => {\n        this.setState(state => {\n          // filter by state.filter.selection.projects\n          state.pools = (state.filter.selection.projects === undefined || state.filter.selection.projects.length === 0)\n            ? pools\n            : state.filter.selection.projects.reduce((o, k) => ({ ...o, [k]: pools[k] }), {});\n\n          // populate filter options\n          state.filter.option.projects = Object.keys(pools).filter(x => x !== 'count').sort();\n          state.filter.option.projects.forEach(project => {\n            state.filter.option.domains = [...new Set([...state.filter.option.domains, ...Object.keys(pools[project]).filter(x => x !== 'count')])].sort();\n            Object.keys(pools[project]).forEach(domain => {\n              state.filter.option.workers = [...new Set([...state.filter.option.workers, ...Object.keys(pools[project][domain]).filter(x => x !== 'count')])].sort();\n            });\n          });\n          return state;\n        });\n      });\n  }\n\n  /*\n  handleFilterChange(event) {\n    let id = event.target.id.split('_');\n    let filter = id[1];\n    let property = id[2];\n    this.setState(state => {\n      let index = state.filter.selection[filter].indexOf(property);\n      if (index > -1) {\n        state.filter.selection[filter].splice(index, 1);\n      } else {\n        state.filter.selection[filter].push(property);\n      }\n      return state;\n    });\n  }\n  */\n\n  render() {\n    return (\n      <Container fluid={this.state.fluid}>\n        <Row>\n          <Col>\n            {\n              ['projects', 'domains', 'workers'].map(filter => (\n                <div>\n                  <h6>{filter}</h6>\n                  {\n                    this.state.filter.option[filter].map(property => (\n                      <Form.Check\n                        type=\"checkbox\"\n                        onChange={()=>{}/*this.handleFilterChange*/}\n                        checked={this.state.filter.selection[filter].includes(property)}\n                        label={property}\n                        id={'filter_' + filter + '_' + property}\n                        key={'filter_' + filter + '_' + property} />\n                    ))\n                  }\n                </div>\n              ))\n            }\n          </Col>\n        {\n          [...Array(this.state.columns).keys()].map(column =>(\n            <Col key={column} xs={10}>\n              {\n                Object.keys(this.state.pools).sort((pA, pB) => { return ((Object.keys(this.state.pools[pA]).length) < (Object.keys(this.state.pools[pB]).length)) ? -1 : ((Object.keys(this.state.pools[pA]).length) > (Object.keys(this.state.pools[pB]).length)) ? 1 : 0 }).filter((x, i) => ((i % this.state.columns === column) && (x !== 'count'))).map(project => (\n                  <Card key={project}>\n                    <Card.Header>\n                        <strong>\n                          {project}\n                        </strong>\n                        <small className=\"text-muted font-weight-light float-right\">\n                          {(Object.keys(this.state.pools[project]).length - 1)} active domain{((Object.keys(this.state.pools[project]).length - 1) === 1) ? '' : 's'},\n                          &nbsp;{this.state.pools[project].count.instance} running instance{(this.state.pools[project].count.instance === 1) ? '' : 's'},\n                          &nbsp;{this.state.pools[project].count.task}  recent task{(this.state.pools[project].count.task === 1) ? '' : 's'}\n                        </small>\n                    </Card.Header>\n                    <ListGroup className=\"list-group-flush\">\n                      {\n                        Object.keys(this.state.pools[project]).filter(x => ((x !== 'count') && ((this.state.domains === undefined || this.state.domains.length === 0) || this.state.domains.includes(x)))).sort().map(domain => (\n                          <ListGroupItem key={domain}>\n                            <strong>\n                              {domain}\n                            </strong>\n                            <small className=\"text-muted font-weight-light float-right\">\n                              {(Object.keys(this.state.pools[project][domain]).length - 1)} pool{((Object.keys(this.state.pools[project][domain]).length - 1) === 1) ? '' : 's'},\n                              &nbsp;{this.state.pools[project][domain].count.instance} running instance{(this.state.pools[project][domain].count.instance === 1) ? '' : 's'},\n                              &nbsp;{this.state.pools[project][domain].count.task}  recent task{(this.state.pools[project][domain].count.task === 1) ? '' : 's'}\n                            </small>\n                            <ul>\n                              {\n                                Object.keys(this.state.pools[project][domain]).filter(x => ((x !== 'count') && ((this.state.workers === undefined || this.state.workers.length === 0) || this.state.workers.includes(x)))).sort().map(pool => (\n                                  <li key={pool}>\n                                    {pool}\n                                    <small className=\"text-muted font-weight-light float-right\">\n                                      {this.state.pools[project][domain][pool].count.instance} running instance{(this.state.pools[project][domain][pool].count.instance === 1) ? '' : 's'},\n                                      &nbsp;{this.state.pools[project][domain][pool].count.task}  recent task{(this.state.pools[project][domain][pool].count.task === 1) ? '' : 's'}\n                                    </small>\n                                  </li>\n                                ))\n                              }\n                            </ul>\n                          </ListGroupItem>\n                        ))\n                      }\n                    </ListGroup>\n                  </Card>\n                ))\n              }\n            </Col>\n          ))\n        }\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}